# NOTE: Any ending (strictly ending, not just containing) with the 'IGNORE INITIALLY' comment will be ignored by install.sh (but applied with update.sh) 
#       The main use case for this is to avoid applying 'bypass' policies to some sites that
#       should not be protected by Authelia once fully set up, but should be protected before
#       some manual step is taken (usually manual creation of an admin account).

pod:
  kind: DaemonSet
  extraVolumeMounts:
    - name: users-database
      mountPath: "/config/users"
      readOnly: true
  extraVolumes:
    - name: users-database
      secret:
        secretName: authelia-users
        items:
          - key: users-database.yaml
            path: users-database.yaml
configMap:
  authentication_backend:
    ldap:
      enabled: false
    file:
      enabled: true
      password:
        algorithm: sha512
        iterations: 100000
      path: /config/users/users-database.yaml
    password_reset:
      disable: true
  session:
    redis:
      enabled: true
      deploy: true
      enabledSecret: false
      host: "authelia-redis-master.production.svc.cluster.local"
      port: 6379
      username: ""
      password:
        value: "$AUTHELIA_REDIS_PASSWORD"
      database_index: 0
      maximum_active_connections: 8
      minimum_idle_connections: 0
      tls:
        enabled: false
        server_name: ""
        skip_verify: false
      high_availability:
        enabled: false
        enabledSecret: false
        sentinel_name: "mysentinel"
        username: ""
        password:
          value: ""
        nodes: []
    cookies:
      - subdomain: "$AUTHELIA_SUBDOMAIN"
        domain: "$AUTHELIA_TOP_DOMAIN"
        path: ""
        default_redirection_url: ""
  storage:
    encryption_key:
      value: "$AUTHELIA_DB_ENCRYPTION_KEY"
    local:
      enabled: false
    postgres:
      enabled: true
      deploy: true
      address: "tcp://authelia-postgresql.production.svc.cluster.local:5432"
      timeout: "5 seconds"
      password:
        value: "$AUTHELIA_DB_PASSWORD"
      tls:
        enabled: false
  notifier:
    filesystem:
      enabled: true
    smtp:
      enabled: false
  identity_providers:
    oidc:
      enabled: true
      ## See: https://www.authelia.com/c/oidc
      hmac_secret:
        value: '$AUTHELIA_OIDC_HMAC_SECRET'
      jwks:
        - key:
            value: |
              $AUTHELIA_JWKS_KEY
      clients:
      - client_id: 'immich'
        client_name: 'immich'
        client_secret: '$AUTHELIA_IMMICH_CLIENT_SECRET'
        public: false
        authorization_policy: 'two_factor'
        redirect_uris:
          - 'https://immich.$SERVICES_DOMAIN/auth/login'
          - 'https://immich.$SERVICES_DOMAIN/user-settings'
          - 'app.immich:///oauth-callback'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
        userinfo_signed_response_alg: 'none'
  log:
    level: debug
  totp:
    issuer: $SERVICES_TOP_DOMAIN
  access_control:
    rules:
      - domain: tv.$SERVICES_DOMAIN # IGNORE INITIALLY
        policy: bypass # IGNORE INITIALLY
      - domain: pixelntfy.$SERVICES_DOMAIN
        policy: bypass
      - domain: isbn.$SERVICES_DOMAIN
        policy: bypass
      - domain: nextcloud.$SERVICES_DOMAIN # IGNORE INITIALLY
        policy: bypass # IGNORE INITIALLY
      - domain: ha.$SERVICES_DOMAIN # IGNORE INITIALLY
        policy: bypass # IGNORE INITIALLY
      - domain: ntfy.$SERVICES_DOMAIN
        policy: bypass
      - domain: files.$SERVICES_DOMAIN
        resources:
        - '^/share([/?].*)?$'
        - '^/static([/?].*)?$'
        - '^/api/public([/?].*)?$'
        policy: bypass
      - domain: send.$SERVICES_DOMAIN
        resources:
        - '^/download/[^/]+/?$'
        - '^/api/download/[^/]+/?$'
        - '^/api/download/blob/[^/]+/?$'
        - '^/api/info/[^/]+/?$'
        - '^/api/metadata/[^/]+/?$'
        - '^/[^/]+\.js$'
        - '^/[^/]+\.svg$'
        - '^/[^/]+\.css$'
        - '^/[^/]+\.woff2$'
        - '^/[^/]+\.png$'
        - '^/__heartbeat__/?$'
        policy: bypass
      - domain: music.$SERVICES_DOMAIN # IGNORE INITIALLY
        policy: bypass # IGNORE INITIALLY
      - domain: immich.$SERVICES_DOMAIN # IGNORE INITIALLY
        policy: bypass # IGNORE INITIALLY
      - domain: auth.$SERVICES_DOMAIN
        policy: bypass
      - domain: webdav.$SERVICES_DOMAIN
        policy: bypass
      - domain: plausible.$SERVICES_DOMAIN # IGNORE INITIALLY
        policy: bypass # IGNORE INITIALLY
      - domain: '*.$SERVICES_TOP_DOMAIN'
        policy: two_factor
        subject:
          - 'group:admins'
  regulation:
    max_retries: 3
    find_time: 120
    ban_time: 300
postgresql:
  auth:
    postgresPassword: authelia
    username: authelia
    password: "$AUTHELIA_DB_PASSWORD"
    database: authelia
  primary:
    persistence:
      enabled: true
      existingClaim: authelia-pvc
      subPath: "storage"
    podSecurityContext:
      fsGroup: $MY_UID
    containerSecurityContext:
      runAsUser: $MY_UID
      runAsGroup: $MY_UID
      allowPrivilegeEscalation: false
      seLinuxOptions:
        type: spc_t # SELinux doesn't play well with K8s PVCs

redis:
  architecture: standalone
  auth:
    enabled: false
    sentinel: true
    password: "$AUTHELIA_REDIS_PASSWORD"
    usePasswordFiles: false
  master:
    resources: {}
    priorityClassName: ""
    persistence:
      enabled: true
      existingClaim: authelia-pvc
      subPath: "session"
    podSecurityContext:
      fsGroup: $MY_UID
    containerSecurityContext:
      runAsUser: $MY_UID
      runAsGroup: $MY_UID
      allowPrivilegeEscalation: false
      seLinuxOptions:
        type: spc_t # SELinux doesn't play well with K8s PVCs
  replica:
    replicaCount: 1
    resources: {}
    priorityClassName: ""
    persistence:
      enabled: true
      existingClaim: authelia-pvc
      subPath: "session"
