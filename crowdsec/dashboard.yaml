# Does not currently work

---
apiVersion: v1
kind: Secret
metadata:
  name: crowdsec-dashboard-db-secret
  namespace: production
type: Opaque
stringData:
  POSTGRES_DB: crowdsec_dashboard_db
  POSTGRES_USER: crowdsec_dashboard_db_user
  POSTGRES_PASSWORD: crowdsec_dashboard_db_password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crowdsec-dashboard-db
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crowdsec-dashboard-db
  template:
    metadata:
      labels:
        app: crowdsec-dashboard-db
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: crowdsec-dashboard-db
          image: postgres:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: crowdsec-dashboard-db-secret
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: crowdsec-nfs-volume
              subPath: dashboard-db
      volumes:
        - name: crowdsec-nfs-volume
          persistentVolumeClaim:
            claimName: crowdsec-nfs-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: crowdsec-dashboard-db
  namespace: production
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    app: crowdsec-dashboard-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crowdsec-dashboard
  namespace: production
  labels:
    app: crowdsec-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crowdsec-dashboard
  template:
    metadata:
      labels:
        app: crowdsec-dashboard
    spec:
      containers:
      - name: crowdsec-dashboard
        image: metabase/metabase:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: crowdsec-dashboard
  namespace: production
  labels:
    app: crowdsec-dashboard
spec:
  selector:
    app: crowdsec-dashboard
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: crowdsec-dashboard
  namespace: production
  annotations: 
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`crowdsec.staging.imranr.dev`)
      kind: Rule
      services:
        - name: crowdsec-dashboard
          port: 80
  tls:
    secretName: imranr-dev-tls

# Can't figure out how to convert their weird ass H2 DB format into Postgres (below code fails)
# mkdir -p "$HERE"/state/crowdsec/dashboard-data
# mkdir -p "$HERE"/state/crowdsec/dashboard-db
# DB_EXISTS="$(ls "$HERE"/state/crowdsec/dashboard-db)"
# kubectl apply -f "$HERE"/crowdsec/dashboard.yaml
# if [ -z "$DB_EXISTS" ]; then # Bootstrap dashboard DB from https://crowdsec-statics-assets.s3-eu-west-1.amazonaws.com/metabase_sqlite.zip
#     sleep 20
#     TEMP_DIR="$(mktemp -d)"
#     cd "$TEMP_DIR"
#     wget https://crowdsec-statics-assets.s3-eu-west-1.amazonaws.com/metabase_sqlite.zip
#     unzip metabase_sqlite.zip
#     wget https://downloads.metabase.com/v0.50.21/metabase.jar
#     wget https://repo1.maven.org/maven2/com/h2database/h2/1.4.200/h2-1.4.200.jar
#     wget https://repo1.maven.org/maven2/com/h2database/h2/2.3.232/h2-2.3.232.jar
#     sudo dnf install java-21-openjdk-headless
#     java -cp h2-1.4.200.jar org.h2.tools.Script -url jdbc:h2:$TEMP_DIR/metabase.db/metabase.db.mv.db -script backup.zip -options compression zip
#     java -cp h2-2.3.232.jar org.h2.tools.RunScript -url jdbc:h2:$TEMP_DIR/newdb.db -script backup.zip -options compression zip FROM_1X
#     awk 'NR==1,/ClusterIP/{sub(/ClusterIP/, "NodePort")} 1' "$HERE"/crowdsec/dashboard.yaml >temp.yaml
#     sleep 10
#     kubectl apply -f temp.yaml
#     sleep 10
#     DB_PORT="$(kubectl -n production get svc crowdsec-dashboard-db -o jsonpath='{.spec.ports[0].nodePort}')"
#     DB_NAME="$(cat "$HERE"/crowdsec/dashboard.yaml | grep POSTGRES_DB | awk -F: '{print $NF}' | xargs)"
#     DB_USER="$(cat "$HERE"/crowdsec/dashboard.yaml | grep POSTGRES_USER | awk -F: '{print $NF}' | xargs)"
#     DB_PASS="$(cat "$HERE"/crowdsec/dashboard.yaml | grep POSTGRES_PASSWORD | awk -F: '{print $NF}' | xargs)"
#     export MB_DB_TYPE=postgres
#     export MB_DB_CONNECTION_URI="jdbc:postgresql://localhost:$DB_PORT/$DB_NAME?user=$DB_USER&password=$DB_PASS"
#     java -jar metabase.jar load-from-h2 "$TEMP_DIR"/newdb.db # do not include .mv.db
#     kubectl apply -f "$HERE"/crowdsec/dashboard.yaml
#     cd "$CURRENT_DIR"
#     rm -r "$TEMP_DIR"
# fi