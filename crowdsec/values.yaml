# Note: The Crowdsec dashboard only works when you use the SQLite DB.
#       SQLite can only be used by one instance at a time, so this means the service must be a singleton (no HA).
#       If you decide to enable HA (2+ replcias) in the future (and lose the dashboard):
#       1. Apply ha-db.yaml.
#       2. Uncomment the commented-out lines in this file and set data.enabled to false, then apply the changes.
#       3. Delete the IngressRoute for CrowdSec.

image:
  pullPolicy: Always

config:
  # config.yaml.local: |
  #   db_config:
  #     type:     postgresql
  #     user:     ${DB_USERNAME}
  #     password: ${DB_PASSWORD}
  #     db_name:  ${DB_NAME}
  #     host:     crowdsec-db.production.svc.cluster.local
  #     port:     5432
  #     sslmode:  disable
  profiles.yaml: |
    name: default_ip_remediation
    debug: true
    filters:
        - Alert.Remediation == true && Alert.GetScope() == "Ip"
    decisions:
        - type: ban
          duration: 672h
    notifications:
        - http_default # Set the required http parameters in /etc/crowdsec/notifications/http.yaml before enabling this.
    on_success: break
  notifications:
    http.yaml: |
      type: http          # Don't change
      
      name: http_default  # Must match the registered plugin in the profile

      # One of "trace", "debug", "info", "warn", "error", "off"
      log_level: debug

      # group_wait:         # Time to wait collecting alerts before relaying a message to this plugin, eg "30s"
      # group_threshold:    # Amount of alerts that triggers a message before <group_wait> has expired, eg "10"
      # max_retry:          # Number of attempts to relay messages to plugins in case of error
      # timeout:            # Time to wait for response from the plugin before considering the attempt a failure, eg "10s"

      #-------------------------
      # plugin-specific options

      # The following template receives a list of models.Alert objects
      # The output goes in the http request body
      format: |
        {{.|toJson}}

      # The plugin will make requests to this url, eg:  https://www.example.com/
      url: https://ntfy.staging.imranr.dev/pcx_services_crowdsec

      # Any of the http verbs: "POST", "GET", "PUT"...
      method: POST

      headers:
        Authorization: Bearer tk_q37gtnj3ncck1i98b2lzw1u2ejzh0
        Title: Crowdsec on PCX
# PROD TODO Ntfy creds
container_runtime: containerd

agent:
  acquisition:
    - namespace: production
      podName: traefik-*
      program: traefik
  env:
    - name: COLLECTIONS
      value: "crowdsecurity/traefik"
    - name: LEVEL_DEBUG
      value: "true"

lapi:
  replicas: 1 # Multiple replicas should work after chart 0.11.2 (assuming an external DB is used)
  dashboard:
    enabled: true
  env:
    - name: BOUNCER_KEY_traefik
      value: "96e26fdf5a9ae8775280c96a7d2241ab389f68c0d44b1022ffa300d5dd8bc099" # PROD TODO: Replace this with a different random value
    # - name: DB_NAME
    #   valueFrom:
    #     secretKeyRef:
    #       name: crowdsec-db-secret
    #       key: POSTGRES_DB
    # - name: DB_USERNAME
    #   valueFrom:
    #     secretKeyRef:
    #       name: crowdsec-db-secret
    #       key: POSTGRES_USER
    # - name: DB_PASSWORD
    #   valueFrom:
    #     secretKeyRef:
    #       name: crowdsec-db-secret
    #       key: POSTGRES_PASSWORD
  persistentVolume:
    config:
      enabled: false
    data:
      enabled: true
      existingClaim: crowdsec-pvc
  secrets:
    csLapiSecret: "eb7528fb92305045dd5a3b4c1dbd64d16040c792e3b2607f9ab6efd2d5e2adb8" # PROD TODO: Replace this with a different random value
